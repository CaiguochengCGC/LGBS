USE [WebReport_DB]
GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PMC_PRODUCT_TIME]    Script Date: 08/24/2015 09:49:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-----实际生产时间查询 
-----每天8:03分运行存储过程
ALTER  PROCEDURE  [dbo].[USP_GET_PMC_PRODUCT_TIME] 
  @ERROR_TAG   CHAR(1)        OUTPUT,      --错误标志：0.成功,1.错误
  @ERROR_MSG   NVARCHAR(4000) OUTPUT       --错误信息
As 
Begin
DECLARE  @SEQ	VARCHAR(10);--顺序
DECLARE  @PRODUCTLINE  varchar(50) ;--线体
DECLARE  @PPRODUCTIONLINENAME   varchar(50) ;---线体名称 
DECLARE  @STATION  varchar(50);---工位
DECLARE  @ONEWORKTIME  numeric(9,2);---1班历时
DECLARE  @TWOWORKTIME  numeric(9,2);---2班历时
DECLARE  @THREEWORKTIME  numeric(9,2);---3班历时
DECLARE  @SHIFT	VARCHAR(50);--班次
DECLARE  @STARTTIME		datetime;--开始时间
DECLARE  @ENDTIME		datetime;--开始时间
DECLARE  @UPDATEONEWORKTIME	numeric(9,2);--
DECLARE  @UPDATETWOWORKTIME	numeric(9,2);--
DECLARE  @UPDATETHREEWORKTIME	numeric(9,2);--

BEGIN TRY
    BEGIN TRANSACTION
    
DECLARE  cur_data  cursor  for
--获取需要计算的工位(站点)名称
SELECT substring(PARAM_CODE,17,2),substring(PARAM_CODE,20,10),PARAM_NAME,PARAM_VAL FROM SYS_PARAM WHERE PARAM_CODE LIKE 'PRODUCT_STATION*%'
open  cur_data
fetch  next  from  cur_data  into  @SEQ,@PRODUCTLINE ,@PPRODUCTIONLINENAME ,@STATION
while(@@fetch_status  =  0) 
begin 
	
	--获取工作日期的工作时间
	DECLARE  cur_data_date  cursor  for
	SELECT SHIFT,STARTTIME,ENDTIME FROM PMC_DATE_IMPORT 
	WHERE CONVERT(VARCHAR(10),WORKDATE,23) = CONVERT(varchar(10), getdate()-1, 20)
	open  cur_data_date
	fetch  next  from  cur_data_date  into @SHIFT,@STARTTIME ,@ENDTIME 
	while(@@fetch_status  =  0) 
	begin 
		--计算实际生产时间
		--1班开始时间
		IF @SHIFT = 1
		begin
		SELECT @ONEWORKTIME = SUM(EVENTDATA14)/60/60 FROM tabCycleTime 
		WHERE EVENTDATA1 = @STATION
		AND EVENTDATA16 = @PPRODUCTIONLINENAME
		AND EVENTDATE >= @STARTTIME
		AND EVENTDATE < @ENDTIME
		end

		--2班开始时间
		IF @SHIFT = 2
		begin
		SELECT @TWOWORKTIME = SUM(EVENTDATA14)/60/60 FROM tabCycleTime 
		WHERE EVENTDATA1 = @STATION
		AND EVENTDATA16 = @PPRODUCTIONLINENAME
		AND EVENTDATE >= @STARTTIME
		AND EVENTDATE < @ENDTIME
		end

		--3班开始时间
		IF @SHIFT = 3
		begin
		SELECT @THREEWORKTIME = SUM(EVENTDATA14)/60/60 FROM tabCycleTime 
		WHERE EVENTDATA1 = @STATION
		AND EVENTDATA16 = @PPRODUCTIONLINENAME
		AND EVENTDATE >= @STARTTIME
		AND EVENTDATE < @ENDTIME
		end
		
	fetch  next  from  cur_data_date  into  @SHIFT,@STARTTIME ,@ENDTIME 
	end
	close  cur_data_date
	DEALLOCATE  cur_data_date
	
	IF @SEQ = '02'
	BEGIN
		SET @UPDATEONEWORKTIME = @ONEWORKTIME
		SET @UPDATETWOWORKTIME = @TWOWORKTIME
		SET @UPDATETHREEWORKTIME = @THREEWORKTIME
	END
	
	INSERT INTO PMC_PP_PRODUCT_TIME(PPDATE,PRODUCTLINE,PRODUCTLINENAME,PRODUCTTYPE,ONEWORKTIME,TWOWORKTIME,THREEWORKTIME,UDA_1)
	VALUES(CONVERT(varchar(10), getdate()-1, 20),@PRODUCTLINE,@PPRODUCTIONLINENAME,@STATION,@ONEWORKTIME,@TWOWORKTIME,@THREEWORKTIME,@SEQ)
	

fetch  next  from  cur_data  into  @SEQ,@PRODUCTLINE ,@PPRODUCTIONLINENAME ,@STATION
end
close  cur_data
DEALLOCATE  cur_data

UPDATE PMC_PP_PRODUCT_TIME SET ONEWORKTIME = @UPDATEONEWORKTIME,TWOWORKTIME = @UPDATETWOWORKTIME,THREEWORKTIME = @UPDATETHREEWORKTIME
WHERE CONVERT(varchar(10),PPDATE,20) = CONVERT(varchar(10), getdate()-1, 20) 
AND UDA_1 IN ('01','25','26','27','28','29','30','31','32','33','34','35','36')

COMMIT TRANSACTION
  END TRY
  BEGIN CATCH
    
    IF XACT_STATE() <> 0
    BEGIN
      ROLLBACK TRANSACTION
    END
    
    SET @ERROR_TAG = '1'
    SET @ERROR_MSG = ERROR_MESSAGE()    
   
  END CATCH

END